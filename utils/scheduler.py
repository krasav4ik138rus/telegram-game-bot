from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime, timedelta
from telegram.ext import Application
from bson import ObjectId
from database.crud import EventCRUD, UserCRUD  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º EventCRUD –∏ UserCRUD


async def check_upcoming_events(app: Application):
    now = datetime.utcnow()
    upcoming = EventCRUD.events_collection.find(
        {  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é, —Ç–∞–∫ –∫–∞–∫ EventCRUD.find() –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            "datetime": {
                "$gte": now.isoformat(),  # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–Ω—É—Ç—Å—è –≤ –±–ª–∏–∂–∞–π—à–∏–µ 30 –º–∏–Ω—É—Ç
                "$lte": (now + timedelta(minutes=30)).isoformat()
            },
            "notified_upcoming": {"$ne": True}  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–ª–∞–≥, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        })

    async for event in upcoming:
        participants = event.get("participants", [])
        for user_id in participants:
            try:
                await app.bot.send_message(
                    chat_id=user_id,
                    text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è —Å–æ–±—ã—Ç–∏–µ '{event['game']}' –≤ {event['datetime']}"
                )
                # –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–Ω–æ–µ
                await EventCRUD.events_collection.update_one(
                    {"_id": event["_id"]},
                    {"$set": {"notified_upcoming": True}}
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")


async def check_ended_events_for_rating(app: Application):
    now = datetime.utcnow()
    # –ò—â–µ–º —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –µ—â–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –æ—Ü–µ–Ω–∫—É
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ datetime –∏ duration —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ, –ø–æ–∑–≤–æ–ª—è—é—â–µ–º –∏—Ö —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å
    # –ï—Å–ª–∏ datetime - —Å—Ç—Ä–æ–∫–∞ ISO, –∞ duration - int —á–∞—Å–æ–≤, —Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å

    # –ú–æ–∂–Ω–æ –∏—Å–∫–∞—Ç—å —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—á–∞–ª–∏—Å—å –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞ –∏ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –Ω–µ–¥–∞–≤–Ω–æ
    # –ò –Ω–µ –±—ã–ª–∏ –æ—Ü–µ–Ω–µ–Ω—ã (–¥–æ–±–∞–≤–∏–º –ø–æ–ª–µ 'rating_requested' –≤ —Å–æ–±—ã—Ç–∏–µ)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—á–∞–ª–∏—Å—å
    all_events_cursor = EventCRUD.events_collection.find({
        "datetime": {"$lte": now.isoformat()},
        "rating_requested": {"$ne": True}  # –ï—â–µ –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –æ—Ü–µ–Ω–∫—É
    })

    async for event in all_events_cursor:
        try:
            event_datetime_str = event.get("datetime")
            event_duration_hours = event.get("duration")

            if not event_datetime_str or not event_duration_hours:
                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –Ω–µ–ø–æ–ª–Ω—ã–µ

            event_start_dt = datetime.fromisoformat(event_datetime_str)
            event_end_dt = event_start_dt + timedelta(hours=event_duration_hours)

            # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –∑–∞–∫–æ–Ω—á–∏–ª–æ—Å—å –∏ –ø—Ä–æ—à–ª–æ –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ —Å –º–æ–º–µ–Ω—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è
            if event_end_dt <= now and (now - event_end_dt) <= timedelta(hours=24):
                participants = event.get("participants", [])
                creator_id = event.get("creator_id")
                event_id = str(event["_id"])

                for participant_id in participants:
                    if participant_id != creator_id:  # –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –¥–æ–ª–∂–µ–Ω –æ—Ü–µ–Ω–∏–≤–∞—Ç—å —Å–µ–±—è
                        try:
                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ü–µ–Ω–∫—É
                            await app.bot.send_message(
                                chat_id=participant_id,
                                text=f"–°–æ–±—ã—Ç–∏–µ '{event['game']}' –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è ({event.get('creator_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')})!",
                                reply_markup=KeyboardBuilder.build_rating_keyboard(event_id, creator_id)
                                # –ù–æ–≤–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
                            )
                        except Exception as e:
                            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –æ—Ü–µ–Ω–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {participant_id}: {e}")

                # –ü–æ–º–µ—á–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –∫–∞–∫ "–æ—Ü–µ–Ω–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞"
                await EventCRUD.events_collection.update_one(
                    {"_id": event["_id"]},
                    {"$set": {"rating_requested": True}}
                )

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–≤–µ—Ä—à–∏–≤—à–µ–≥–æ—Å—è —Å–æ–±—ã—Ç–∏—è {event.get('_id')}: {e}")


def setup_scheduler(app: Application):
    scheduler = AsyncIOScheduler()
    scheduler.add_job(check_upcoming_events, 'interval', minutes=5, args=[app])
    scheduler.add_job(check_ended_events_for_rating, 'interval', hours=1,
                      args=[app])  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–µ—Å—è —Å–æ–±—ã—Ç–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å
    scheduler.start()