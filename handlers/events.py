from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    CallbackQueryHandler,
    CommandHandler,
    filters,
)
from datetime import datetime, timedelta
from database.crud import EventCRUD, UserCRUD, RatingCRUD  # –î–æ–±–∞–≤–ª—è–µ–º UserCRUD –∏ RatingCRUD
from keyboards.builder import KeyboardBuilder

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
DATE, TIME, GAME, DESCRIPTION, PARTICIPANT_LIMIT = range(5)  # –ù–æ–≤—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è, DURATION —É–¥–∞–ª–µ–Ω

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
EDIT_CHOICE, EDIT_DATE, EDIT_TIME, EDIT_GAME, EDIT_DESCRIPTION, EDIT_LIMIT = range(6)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
RATING = range(1)


async def show_event_filters(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üîç –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:",
        reply_markup=KeyboardBuilder.filter_menu()
    )


async def apply_filter(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    filter_type = query.data.split("_")[1]

    now = datetime.utcnow()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–ª—è –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –≤ –ë–î
    if filter_type == "today":
        start = datetime(now.year, now.month, now.day)
        end = datetime(now.year, now.month, now.day, 23, 59, 59)
    elif filter_type == "tomorrow":
        tomorrow = now + timedelta(days=1)
        start = datetime(tomorrow.year, tomorrow.month, tomorrow.day)
        end = datetime(tomorrow.year, tomorrow.month, tomorrow.day, 23, 59, 59)
    else:  # filter_all
        start = datetime.min  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö
        end = datetime.max  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—Å–µ—Ö

    events = await EventCRUD.list_all()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–±—ã—Ç–∏—è, –∑–∞—Ç–µ–º —Ñ–∏–ª—å—Ç—Ä—É–µ–º

    filtered_events = []
    for e in events:
        try:
            event_dt = datetime.fromisoformat(e['datetime'])
            if start <= event_dt <= end:
                filtered_events.append(e)
        except ValueError:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –¥–∞—Ç–æ–π, –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å
            pass

    # –û—Ç—Ñ–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏
    active_filtered_events = [
        e for e in filtered_events
        if datetime.fromisoformat(e['datetime']) >= datetime.utcnow()
    ]

    if not active_filtered_events:
        await query.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ò–∑–º–µ–Ω–∏–ª–∏ —Ü–∏–∫–ª –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è active_events_list
    keyboard = KeyboardBuilder.active_events_list(active_filtered_events, query.from_user.id)
    await query.message.reply_text(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π:",
        reply_markup=keyboard
    )


async def create_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    now = datetime.now()
    calendar = KeyboardBuilder.build_calendar(now.year, now.month)
    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü/–≥–æ–¥ –≤ user_data –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    context.user_data['calendar_year'] = now.year
    context.user_data['calendar_month'] = now.month
    await update.message.reply_text("üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è:", reply_markup=calendar)
    return DATE


async def date_time_picker_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'ignore':
        return DATE

    if data.startswith("prev_month_"):
        _, _, year, month = data.split("_")
        year = int(year)
        month = int(month)

        if month == 1:
            month = 12
            year -= 1
        else:
            month -= 1

        context.user_data['calendar_year'] = year
        context.user_data['calendar_month'] = month
        calendar = KeyboardBuilder.build_calendar(year, month)
        await query.edit_message_reply_markup(reply_markup=calendar)
        return DATE

    if data.startswith("next_month_"):
        _, _, year, month = data.split("_")
        year = int(year)
        month = int(month)

        if month == 12:
            month = 1
            year += 1
        else:
            month += 1

        context.user_data['calendar_year'] = year
        context.user_data['calendar_month'] = month
        calendar = KeyboardBuilder.build_calendar(year, month)
        await query.edit_message_reply_markup(reply_markup=calendar)
        return DATE

    if data.startswith('day_'):
        _, year, month, day = data.split('_')
        date_str = f"{year}-{month.zfill(2)}-{day.zfill(2)}"
        context.user_data['datetime_date'] = date_str

        await query.edit_message_text(
            f"–î–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {date_str}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:",
            reply_markup=KeyboardBuilder.build_time_keyboard()
        )
        return TIME

    if data.startswith('time_'):
        time_str = data.split('_')[1]
        date_str = context.user_data.get('datetime_date')
        if not date_str:
            await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É.")
            return DATE

        full_datetime = f"{date_str} {time_str}"
        context.user_data['datetime'] = full_datetime

        await query.edit_message_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è: {full_datetime}\nüéÆ –í—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É:",
            reply_markup=KeyboardBuilder.build_game_choice_keyboard()
        )
        return GAME

    return DATE


async def process_game_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    if not data.startswith("game_"):
        await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–≥—Ä—É, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏.")
        return GAME

    game = data[len("game_"):]
    context.user_data["game"] = game

    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∏–≥—Ä—É: {game}\nüìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù—É–∂–µ–Ω –º–∏–∫—Ä–æ—Ñ–æ–Ω, –∏–≥—Ä–∞–µ–º –Ω–∞ –Ω–æ–≤–æ–π –∫–∞—Ä—Ç–µ'):"
    )
    return DESCRIPTION  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é


async def process_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text
    context.user_data["description"] = description

    await update.message.reply_text("üë• –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞):")
    return PARTICIPANT_LIMIT  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–æ–≤–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é


async def process_participant_limit(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        limit = int(update.message.text)
        if limit < 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return PARTICIPANT_LIMIT

        context.user_data["participant_limit"] = limit
        context.user_data["participants"] = [update.message.from_user.id]  # –°–æ–∑–¥–∞—Ç–µ–ª—å –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫

        # –î–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è
        context.user_data["creator_id"] = update.message.from_user.id
        creator_name = update.message.from_user.full_name
        if not creator_name:
            creator_name = update.message.from_user.first_name
            if not creator_name:
                creator_name = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {update.message.from_user.id}"
        context.user_data["creator_name"] = creator_name

        # –ó–¥–µ—Å—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        new_event_id = await EventCRUD.create(context.user_data)
        await update.message.reply_text("‚úÖ –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!")

        # --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º —Å–æ–±—ã—Ç–∏–∏ ---
        new_event = await EventCRUD.get(new_event_id)
        if new_event:
            all_users = await UserCRUD.list_all_users()

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ª–∏–º–∏—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_limit = new_event.get('participant_limit', 0)
            limit_text_for_display = f" / {display_limit}" if display_limit > 0 else " / ‚àû"

            notification_text = (
                f"üéâ –ù–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n"
                f"üéÆ –ò–≥—Ä–∞: {new_event.get('game', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {new_event.get('description', '–ù–µ—Ç')}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(new_event.get('participants', []))}{limit_text_for_display}\n"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime.fromisoformat(new_event.get('datetime', '')).strftime('%d.%m.%Y %H:%M')}\n"
                f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {new_event.get('creator_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}"
            )
            for user_id in all_users:
                if user_id != update.message.from_user.id:  # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é, –æ–Ω —É–∂–µ –ø–æ–ª—É—á–∏–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text=notification_text,
                            reply_markup=KeyboardBuilder.event_actions(new_event_id)  # –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è/–ø–æ–¥—Ä–æ–±–Ω–µ–µ
                        )
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        # --- –ö–æ–Ω–µ—Ü —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---

        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ª–∏–º–∏—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return PARTICIPANT_LIMIT


async def cancel_creation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üö´ –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


async def join_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    event_id = query.data.split("_")[1]
    user_id = query.from_user.id

    event = await EventCRUD.get(event_id)
    if not event:
        await query.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —Å–æ–±—ã—Ç–∏—è
    if event.get("creator_id") == user_id:
        await query.message.reply_text("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ —Å–≤–æ–µ–º—É —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–º—É —Å–æ–±—ã—Ç–∏—é.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—á–∞—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–æ–±—ã—Ç–∏–∏
    if user_id in event.get("participants", []):
        await query.message.reply_text("–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏!")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    current_participants_count = len(event.get("participants", []))
    participant_limit = event.get("participant_limit", 0)
    if participant_limit > 0 and current_participants_count >= participant_limit:
        await query.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—Å–µ –º–µ—Å—Ç–∞ –≤ —ç—Ç–æ–º —Å–æ–±—ã—Ç–∏–∏ —É–∂–µ –∑–∞–Ω—è—Ç—ã.")
        return

    updated_event = await EventCRUD.add_participant(event_id, user_id)
    participants_count = len(updated_event.get("participants", []))

    display_limit = updated_event.get('participant_limit', 0)
    limit_text_for_display = f" / {display_limit}" if display_limit > 0 else " / ‚àû"

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await query.message.edit_reply_markup(reply_markup=KeyboardBuilder.event_actions(str(updated_event["_id"])))
    await query.message.reply_text(
        f"‚úÖ –í—ã –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ '{updated_event['game']}'! –¢–µ–ø–µ—Ä—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participants_count}{limit_text_for_display}",
    )


async def event_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    event_id = query.data.split("_")[1]

    event = await EventCRUD.get(event_id)
    if not event:
        await query.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –±–æ–ª–µ–µ —á–∏—Ç–∞–±–µ–ª—å–Ω–æ–≥–æ –≤–∏–¥–∞
    datetime_str = event.get("datetime", "")
    try:
        dt_object = datetime.fromisoformat(datetime_str)
        formatted_datetime = dt_object.strftime("%d.%m.%Y %H:%M")
    except ValueError:
        formatted_datetime = datetime_str  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ ISO, –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å

    description = event.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")  # –î–æ–±–∞–≤–ª–µ–Ω–æ
    limit = event.get("participant_limit", 0)  # –î–æ–±–∞–≤–ª–µ–Ω–æ

    limit_text = f" / {limit}" if limit > 0 else " / ‚àû"

    text = (
        f"üéÆ {event['game']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"  # –î–æ–±–∞–≤–ª–µ–Ω–æ
        f"üìÖ {formatted_datetime}\n"
        f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(event.get('participants', []))}{limit_text}\n"  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
        f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {event.get('creator_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}"
    )
    await query.message.reply_text(text)


async def my_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    created_events = await EventCRUD.list_by_creator(user_id)
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ–±—ã—Ç–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–∞—Å—Ç–≤—É–µ—Ç
    participated_events = await EventCRUD.list_participated_by_user(user_id)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –ø–æ ID
    all_user_events_dict = {}
    for event in created_events:
        all_user_events_dict[str(event["_id"])] = event
    for event in participated_events:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º, –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ —É–∂–µ –µ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å, –∏ —É—á–∞—Å—Ç–Ω–∏–∫)
        all_user_events_dict[str(event["_id"])] = event

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    all_user_events = list(all_user_events_dict.values())
    all_user_events.sort(key=lambda e: datetime.fromisoformat(e.get("datetime", datetime.min.isoformat())))

    if not all_user_events:
        await update.message.reply_text("üòî –í—ã –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–ª–∏ –∏ –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏.")
        return

    await update.message.reply_text("–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π:")
    for event_id, event in all_user_events_dict.items():
        datetime_str = event.get("datetime", "")
        try:
            dt_object = datetime.fromisoformat(datetime_str)
            formatted_datetime = dt_object.strftime("%d.%m.%Y %H:%M")
        except ValueError:
            formatted_datetime = datetime_str

        status_text = ""
        is_creator = False
        if event.get("creator_id") == user_id:
            status_text = "(–°–æ–∑–¥–∞—Ç–µ–ª—å)"
            is_creator = True
        elif user_id in event.get("participants", []):
            status_text = "(–£—á–∞—Å—Ç–Ω–∏–∫)"

        description = event.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")  # –î–æ–±–∞–≤–ª–µ–Ω–æ
        limit = event.get("participant_limit", 0)  # –î–æ–±–∞–≤–ª–µ–Ω–æ
        limit_text = f" / {limit}" if limit > 0 else " / ‚àû"

        text = (
            f"üéÆ {event['game']} {status_text}\n"
            f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"  # –î–æ–±–∞–≤–ª–µ–Ω–æ
            f"üìÖ {formatted_datetime}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {len(event.get('participants', []))}{limit_text}\n"  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
            f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {event.get('creator_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}"
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
        if is_creator:
            keyboard = InlineKeyboardMarkup([
                [InlineKeyboardButton("‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_event_{event_id}")],
                [InlineKeyboardButton("üóëÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_event_{event_id}")]
            ])
            await update.message.reply_text(text, reply_markup=keyboard)
        else:
            # –î–ª—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ - –ø—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è/–ø–æ–¥—Ä–æ–±–Ω–µ–µ
            await update.message.reply_text(text, reply_markup=KeyboardBuilder.event_actions(str(event["_id"])))


async def active_events_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    events = await EventCRUD.list_active_exclude_user(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥

    if not events:
        await update.message.reply_text("‚ùå –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    keyboard = KeyboardBuilder.active_events_list(events,
                                                  user_id)  # –ü–µ—Ä–µ–¥–∞–µ–º user_id –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–æ–ø–∫–∏
    await update.message.reply_text(
        "–í–æ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏:",
        reply_markup=keyboard
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –æ—Ü–µ–Ω–∫–∏
async def request_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    _, event_id, creator_id = query.data.split("_")

    context.user_data['rating_event_id'] = event_id
    context.user_data['rating_creator_id'] = int(creator_id)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–∑–¥–∞—Ç–µ–ª—è –¥–ª—è –æ—Ü–µ–Ω–∫–∏

    await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ü–µ–Ω–∏—Ç–µ —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è –æ—Ç 1 –¥–æ 5:")
    return RATING


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
async def process_rating(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        rating = int(update.message.text)
        if not (1 <= rating <= 5):
            await update.message.reply_text("‚ùå –û—Ü–µ–Ω–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 5. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return RATING

        event_id = context.user_data.get('rating_event_id')
        creator_id = context.user_data.get('rating_creator_id')
        rater_id = update.message.from_user.id

        if not event_id or not creator_id:
            await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ü–µ–Ω–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return ConversationHandler.END

        await RatingCRUD.add_rating(event_id, creator_id, rater_id, rating)
        await update.message.reply_text("‚úÖ –í–∞—à–∞ –æ—Ü–µ–Ω–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –°–ø–∞—Å–∏–±–æ!")

        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ user_data
        context.user_data.pop('rating_event_id', None)
        context.user_data.pop('rating_creator_id', None)

        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return RATING


# --- –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –°–û–ë–´–¢–ò–ô ---
async def edit_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    event_id = query.data.split("_")[2]  # edit_event_<event_id>

    event = await EventCRUD.get(event_id)
    if not event:
        await query.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    if event.get("creator_id") != query.from_user.id:
        await query.message.reply_text("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.")
        return ConversationHandler.END

    context.user_data['event_to_edit'] = event  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("üìÖ –î–∞—Ç—É –∏ –í—Ä–µ–º—è", callback_data="edit_field_datetime")],
        [InlineKeyboardButton("üéÆ –ò–≥—Ä—É", callback_data="edit_field_game")],
        [InlineKeyboardButton("üìù –û–ø–∏—Å–∞–Ω–∏–µ", callback_data="edit_field_description")],
        [InlineKeyboardButton("üë• –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="edit_field_limit")],
        [InlineKeyboardButton("üö´ –û—Ç–º–µ–Ω–∞", callback_data="edit_cancel")]
    ])
    await query.message.reply_text(f"–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–æ–±—ã—Ç–∏–∏ '{event.get('game', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}'?",
                                   reply_markup=keyboard)
    return EDIT_CHOICE


async def edit_field_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data.split("_")[2]  # edit_field_<choice>
    event_to_edit = context.user_data.get('event_to_edit')

    if not event_to_edit:
        await query.message.reply_text("–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    if choice == "datetime":
        now = datetime.now()
        calendar = KeyboardBuilder.build_calendar(now.year, now.month)
        context.user_data['calendar_year'] = now.year
        context.user_data['calendar_month'] = now.month
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –¥–ª—è —Å–æ–±—ã—Ç–∏—è:", reply_markup=calendar)
        return EDIT_DATE
    elif choice == "game":
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –∏–≥—Ä—É:", reply_markup=KeyboardBuilder.build_game_choice_keyboard())
        return EDIT_GAME
    elif choice == "description":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
        return EDIT_DESCRIPTION
    elif choice == "limit":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ª–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (0 –¥–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞):")
        return EDIT_LIMIT
    elif choice == "cancel":
        await query.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    return EDIT_CHOICE  # –û—Å—Ç–∞–µ–º—Å—è –≤ —ç—Ç–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –µ—Å–ª–∏ –≤—ã–±–æ—Ä –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω


async def edit_datetime_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == 'ignore':
        return EDIT_DATE

    event_to_edit = context.user_data.get('event_to_edit')
    if not event_to_edit:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    if data.startswith("prev_month_") or data.startswith("next_month_"):
        _, _, year, month = data.split("_")
        year = int(year)
        month = int(month)

        if data.startswith("prev_month_"):
            if month == 1:
                month = 12; year -= 1
            else:
                month -= 1
        else:  # next_month_
            if month == 12:
                month = 1; year += 1
            else:
                month += 1
        context.user_data['calendar_year'] = year
        context.user_data['calendar_month'] = month
        calendar = KeyboardBuilder.build_calendar(year, month)
        await query.edit_message_reply_markup(reply_markup=calendar)
        return EDIT_DATE

    if data.startswith('day_'):
        _, year, month, day = data.split('_')
        date_str = f"{year}-{month.zfill(2)}-{day.zfill(2)}"
        context.user_data['edit_datetime_date'] = date_str  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ

        await query.edit_message_text(
            f"–ù–æ–≤–∞—è –¥–∞—Ç–∞ –≤—ã–±—Ä–∞–Ω–∞: {date_str}\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è:",
            reply_markup=KeyboardBuilder.build_time_keyboard()
        )
        return EDIT_TIME

    if data.startswith('time_'):
        time_str = data.split('_')[1]
        date_str = context.user_data.get('edit_datetime_date')
        if not date_str:
            await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É.")
            return EDIT_DATE

        full_datetime = f"{date_str} {time_str}"

        updated = await EventCRUD.update_event(
            str(event_to_edit["_id"]),
            {"datetime": full_datetime}
        )
        if updated:
            await query.edit_message_text(f"‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã –Ω–∞: {full_datetime}")
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ user_data, —á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç–∞–ª–∏ —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            updated_event_data = await EventCRUD.get(str(event_to_edit["_id"]))
            context.user_data['event_to_edit'] = updated_event_data
        else:
            await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.")
        return ConversationHandler.END
    return EDIT_DATE


async def edit_game_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    game = query.data.split('_')[1]  # game_<game_name>

    event_to_edit = context.user_data.get('event_to_edit')
    if not event_to_edit:
        await query.edit_message_text("–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    updated = await EventCRUD.update_event(
        str(event_to_edit["_id"]),
        {"game": game}
    )
    if updated:
        await query.edit_message_text(f"‚úÖ –ò–≥—Ä–∞ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –Ω–∞: {game}")
        updated_event_data = await EventCRUD.get(str(event_to_edit["_id"]))
        context.user_data['event_to_edit'] = updated_event_data
    else:
        await query.edit_message_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä—É.")
    return ConversationHandler.END


async def edit_description_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    description = update.message.text

    event_to_edit = context.user_data.get('event_to_edit')
    if not event_to_edit:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return ConversationHandler.END

    updated = await EventCRUD.update_event(
        str(event_to_edit["_id"]),
        {"description": description}
    )
    if updated:
        await update.message.reply_text(f"‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {description}")
        updated_event_data = await EventCRUD.get(str(event_to_edit["_id"]))
        context.user_data['event_to_edit'] = updated_event_data
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ.")
    return ConversationHandler.END


async def edit_limit_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        limit = int(update.message.text)
        if limit < 0:
            await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
            return EDIT_LIMIT

        event_to_edit = context.user_data.get('event_to_edit')
        if not event_to_edit:
            await update.message.reply_text("–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return ConversationHandler.END

        updated = await EventCRUD.update_event(
            str(event_to_edit["_id"]),
            {"participant_limit": limit}
        )
        if updated:
            await update.message.reply_text(f"‚úÖ –õ–∏–º–∏—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {limit if limit > 0 else '–ë–µ–∑–ª–∏–º–∏—Ç'}")
            updated_event_data = await EventCRUD.get(str(event_to_edit["_id"]))
            context.user_data['event_to_edit'] = updated_event_data
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –ª–∏–º–∏—Ç.")
        return ConversationHandler.END
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return EDIT_LIMIT


async def edit_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω –∫–∞–∫ CallbackQuery, —Ç–∞–∫ –∏ MessageHandler
    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    else:
        await update.message.reply_text("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END


# --- –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –û–¢–ú–ï–ù–´ –°–û–ë–´–¢–ò–Ø ---
async def cancel_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    event_id = query.data.split("_")[2]  # cancel_event_<event_id>

    event = await EventCRUD.get(event_id)
    if not event:
        await query.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    if event.get("creator_id") != query.from_user.id:
        await query.message.reply_text("üö´ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ, —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.")
        return

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É", callback_data=f"confirm_cancel_event_{event_id}")],
        [InlineKeyboardButton("üö´ –ù–µ –æ—Ç–º–µ–Ω—è—Ç—å", callback_data="do_not_cancel_event")]
    ])
    await query.message.reply_text(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ '{event.get('game', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}'?",
                                   reply_markup=keyboard)


async def confirm_cancel_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    event_id = query.data.split("_")[3]  # confirm_cancel_event_<event_id>

    event = await EventCRUD.get(event_id)
    if not event:
        await query.message.reply_text("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    deleted = await EventCRUD.delete_event(event_id)
    if deleted:
        await query.message.edit_text(f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{event.get('game', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}' –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        participants = event.get("participants", [])
        for participant_id in participants:
            if participant_id != event.get("creator_id"):  # –ù–µ —É–≤–µ–¥–æ–º–ª—è–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—è
                try:
                    await context.bot.send_message(
                        chat_id=participant_id,
                        text=f"üö® –í–Ω–∏–º–∞–Ω–∏–µ: –°–æ–±—ã—Ç–∏–µ '{event.get('game', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}' (—Å–æ–∑–¥–∞—Ç–µ–ª—å: {event.get('creator_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}) –±—ã–ª–æ –û–¢–ú–ï–ù–ï–ù–û."
                    )
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {participant_id} –æ–± –æ—Ç–º–µ–Ω–µ: {e}")
    else:
        await query.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ.")


async def do_not_cancel_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–û—Ç–º–µ–Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –°–æ–±—ã—Ç–∏–µ –æ—Å—Ç–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω—ã–º.")


def register_handlers(application):
    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex(r"^üéÆ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ$"), create_event)],
        states={
            DATE: [CallbackQueryHandler(date_time_picker_handler)],
            TIME: [CallbackQueryHandler(date_time_picker_handler)],
            GAME: [CallbackQueryHandler(process_game_choice)],
            DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_description)],  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            PARTICIPANT_LIMIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_participant_limit)],
            # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        },
        fallbacks=[MessageHandler(filters.Regex("^(–û—Ç–º–µ–Ω–∞|cancel)$"), cancel_creation)],
        persistent=False,
        name="event_creation_conversation",
    )

    edit_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(edit_event_start, pattern=r"^edit_event_\w+$")],
        states={
            EDIT_CHOICE: [CallbackQueryHandler(edit_field_choice, pattern=r"^edit_field_\w+$")],
            EDIT_DATE: [CallbackQueryHandler(edit_datetime_handler)],
            EDIT_TIME: [CallbackQueryHandler(edit_datetime_handler)],  # Time handler is part of datetime flow
            EDIT_GAME: [CallbackQueryHandler(edit_game_handler, pattern=r"^game_\w+$")],
            EDIT_DESCRIPTION: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_description_handler)],
            EDIT_LIMIT: [MessageHandler(filters.TEXT & ~filters.COMMAND, edit_limit_handler)],
        },
        fallbacks=[CallbackQueryHandler(edit_cancel, pattern="^edit_cancel$"),
                   MessageHandler(filters.Regex("^(–û—Ç–º–µ–Ω–∞|cancel)$"), edit_cancel)],
        persistent=False,
        name="event_edit_conversation",
    )

    rating_conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(request_rating, pattern=r"rate_event_\w+_\d+")],
        states={
            RATING: [MessageHandler(filters.TEXT & ~filters.COMMAND, process_rating)],
        },
        fallbacks=[MessageHandler(filters.COMMAND, cancel_creation)],  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π fallback
        persistent=False,
        name="rating_conversation",
    )

    application.add_handler(conv_handler)
    application.add_handler(edit_conv_handler)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    application.add_handler(rating_conv_handler)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ä–µ–π—Ç–∏–Ω–≥–∞
    application.add_handler(MessageHandler(filters.Regex(r"^üëÄ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è$"), active_events_handler))
    application.add_handler(
        MessageHandler(filters.Regex(r"^‚öôÔ∏è –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è$"), my_events))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è "–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"

    application.add_handler(CallbackQueryHandler(join_event, pattern=r"join_\w+"))
    application.add_handler(CallbackQueryHandler(event_details, pattern=r"info_\w+"))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã
    application.add_handler(CallbackQueryHandler(cancel_event, pattern=r"^cancel_event_\w+$"))
    application.add_handler(CallbackQueryHandler(confirm_cancel_event, pattern=r"^confirm_cancel_event_\w+$"))
    application.add_handler(CallbackQueryHandler(do_not_cancel_event, pattern=r"^do_not_cancel_event$"))

    application.add_handler(CommandHandler("my_events", my_events))  # –ö–æ–º–∞–Ω–¥–∞ /my_events —Ç–∞–∫–∂–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å