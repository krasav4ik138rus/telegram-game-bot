from telegram import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime, timedelta
import calendar  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å calendar


class KeyboardBuilder:
    @staticmethod
    def main_menu():
        return ReplyKeyboardMarkup([
            ["üéÆ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", "üëÄ –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è"],
            ["‚öôÔ∏è –ú–æ–∏ —Å–æ–±—ã—Ç–∏—è", "‚≠ê –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤"]
        ], resize_keyboard=True)

    @staticmethod
    def filter_menu():
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–°–µ–≥–æ–¥–Ω—è", callback_data="filter_today"),
                InlineKeyboardButton("–ó–∞–≤—Ç—Ä–∞", callback_data="filter_tomorrow"),
                InlineKeyboardButton("–í—Å–µ", callback_data="filter_all")
            ]
        ])

    @staticmethod
    def event_actions(event_id: str):
        """
        –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Å–æ–±—ã—Ç–∏–µ–º, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤—É–µ—Ç —Å –Ω–∏–º.
        –ù–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–ª–∏ –≤ —Å–ø–∏—Å–∫–µ '–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è', –≥–¥–µ –Ω–µ –Ω—É–∂–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è'.
        –ö–Ω–æ–ø–∫–∞ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è' –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –≤ active_events_list.
        """
        return InlineKeyboardMarkup([
            [
                InlineKeyboardButton("–ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"info_{event_id}")
            ]
        ])

    @staticmethod
    def build_calendar(year: int, month: int) -> InlineKeyboardMarkup:
        keyboard = []

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
        month_year_str = datetime(year, month, 1).strftime("%B %Y")
        keyboard.append([InlineKeyboardButton(month_year_str, callback_data="ignore")])

        # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏, –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –ø–µ—Ä–≤—ã–π
        days_of_week = ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å']
        keyboard.append([InlineKeyboardButton(day, callback_data="ignore") for day in days_of_week])

        # –ü–æ–ª—É—á–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –º–µ—Å—è—Ü–∞
        cal = calendar.monthcalendar(year, month)
        for week in cal:
            row = []
            for day in week:
                if day == 0:  # –ü—É—Å—Ç—ã–µ –¥–Ω–∏ –≤ –Ω–∞—á–∞–ª–µ –∏–ª–∏ –∫–æ–Ω—Ü–µ –º–µ—Å—è—Ü–∞
                    row.append(InlineKeyboardButton(" ", callback_data="ignore"))
                else:
                    # –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å
                    today = datetime.now().day if datetime.now().year == year and datetime.now().month == month else -1
                    button_text = f"*{day}*" if day == today else str(day)
                    row.append(InlineKeyboardButton(button_text, callback_data=f"day_{year}_{month}_{day}"))
            keyboard.append(row)

        # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ—Å—è—Ü–∞–º
        keyboard.append([
            InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"prev_month_{year}_{month}"),
            InlineKeyboardButton(" ", callback_data="ignore"),  # –ü—É—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è
            InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"next_month_{year}_{month}")
        ])

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def build_time_keyboard() -> InlineKeyboardMarkup:
        keyboard = []
        times = []
        for hour in range(0, 24):
            for minute in [0, 30]:  # –®–∞–≥ –≤ 30 –º–∏–Ω—É—Ç
                times.append(f"{hour:02d}:{minute:02d}")

        # –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
        for i in range(0, len(times), 4):
            row = []
            for time_slot in times[i:i + 4]:
                row.append(InlineKeyboardButton(time_slot, callback_data=f"time_{time_slot}"))
            keyboard.append(row)

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def build_game_choice_keyboard() -> InlineKeyboardMarkup:
        # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π, –±–æ–ª–µ–µ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –∏–≥—Ä
        games = ["Dota 2", "CS2", "Valorant", "League of Legends", "Minecraft", "Fortnite", "Apex Legends", "PUBG",
                 "Genshin Impact", "–î—Ä—É–≥–æ–µ"]
        keyboard = []

        # –†–∞–∑–º–µ—â–∞–µ–º –ø–æ 2 –∏–≥—Ä—ã –≤ —Ä—è–¥
        for i in range(0, len(games), 2):
            row = []
            row.append(InlineKeyboardButton(games[i], callback_data=f"game_{games[i]}"))
            if i + 1 < len(games):
                row.append(InlineKeyboardButton(games[i + 1], callback_data=f"game_{games[i + 1]}"))
            keyboard.append(row)

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def active_events_list(events: list, user_id: int) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞—ë—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º —Å–æ–±—ã—Ç–∏–π.
        –ö–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ - –∫–Ω–æ–ø–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º, –æ–ø–∏—Å–∞–Ω–∏–µ–º, –¥–∞—Ç–æ–π/–≤—Ä–µ–º–µ–Ω–µ–º, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º.
        –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è', '–í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ' –∏–ª–∏ '–ú–µ—Å—Ç –Ω–µ—Ç'.
        """
        keyboard = []
        for event in events:
            event_id = str(event["_id"])
            game = event.get("game", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            datetime_str = event.get("datetime", "")
            creator = event.get("creator_name", "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")
            participants = event.get("participants", [])
            count = len(participants)
            description = event.get("description", "–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è")  # –ù–æ–≤–æ–µ –ø–æ–ª–µ
            limit = event.get("participant_limit", 0)  # –ù–æ–≤–æ–µ –ø–æ–ª–µ

            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
            try:
                dt_object = datetime.fromisoformat(datetime_str)
                formatted_datetime = dt_object.strftime("%d.%m.%Y %H:%M")
            except ValueError:
                formatted_datetime = datetime_str

            # –¢–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞
            limit_text = f" / {limit}" if limit > 0 else " / ‚àû"

            # –¢–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ–±—ã—Ç–∏–∏
            text_button = (
                f"üéÆ {game}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description}\n"  # –î–æ–±–∞–≤–ª–µ–Ω–æ
                f"üìÖ {formatted_datetime}\n"
                f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}{limit_text}\n"  # –û–±–Ω–æ–≤–ª–µ–Ω–æ
                f"–°–æ–∑–¥–∞—Ç–µ–ª—å: {creator}"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –¥–µ—Ç–∞–ª—è–º–∏ —Å–æ–±—ã—Ç–∏—è
            keyboard.append([InlineKeyboardButton(text_button, callback_data=f"info_{event_id}")])

            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è/—É—á–∞—Å—Ç–∏—è/–Ω–µ—Ç –º–µ—Å—Ç
            if user_id in participants:
                keyboard.append(
                    [InlineKeyboardButton(f"‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ ({count}{limit_text})", callback_data=f"info_{event_id}")])
            elif limit > 0 and count >= limit:  # –ï—Å–ª–∏ –µ—Å—Ç—å –ª–∏–º–∏—Ç –∏ –æ–Ω –¥–æ—Å—Ç–∏–≥–Ω—É—Ç
                keyboard.append(
                    [InlineKeyboardButton(f"üö´ –ú–µ—Å—Ç –Ω–µ—Ç ({count}{limit_text})", callback_data=f"info_{event_id}")])
            else:  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —É—á–∞—Å—Ç–≤—É–µ—Ç –∏ –µ—Å—Ç—å –º–µ—Å—Ç–∞
                keyboard.append(
                    [InlineKeyboardButton(f"‚ûï –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è ({count}{limit_text})", callback_data=f"join_{event_id}")])

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
            keyboard.append([InlineKeyboardButton("‚Äî" * 30, callback_data="ignore")])

        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def build_rating_keyboard(event_id: str, creator_id: int) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—è —Å–æ–±—ã—Ç–∏—è.
        """
        keyboard = [
            [InlineKeyboardButton("1‚≠ê", callback_data=f"rate_event_{event_id}_{creator_id}"),
             InlineKeyboardButton("2‚≠ê", callback_data=f"rate_event_{event_id}_{creator_id}"),
             InlineKeyboardButton("3‚≠ê", callback_data=f"rate_event_{event_id}_{creator_id}"),
             InlineKeyboardButton("4‚≠ê", callback_data=f"rate_event_{event_id}_{creator_id}"),
             InlineKeyboardButton("5‚≠ê", callback_data=f"rate_event_{event_id}_{creator_id}")]
        ]
        return InlineKeyboardMarkup(keyboard)